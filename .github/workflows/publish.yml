name: Build and publish
on:
  pull_request:
    types: [closed]
    branches:
      - master
      - develop
      - beta
      - stable

jobs:
  create_release:
    if: github.event.pull_request.merged
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.export_outputs.outputs.version }}
      branch: ${{ steps.export_outputs.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Checkout submodules
        run: git submodule update --init
      - name: Set Versions
        run: |
          bash ./scripts/set_versions_ga.sh
      - name: Set release
        run: |
          if [[ "$BRANCH" == "stable" ]]; then
            export PRERELEASE=false
          else
            export PRERELEASE=true
          fi
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: ${{ env.PRERELEASE }}
      - name: Export outputs
        id: export_outputs
        run: |
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=branch::$BRANCH"
  build_and_publish:
    if: github.event.pull_request.merged
    needs: create_release
    name: Build and publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: sk-alloc-${{ needs.create_release.outputs.version }}-Linux-x86_64
          - os: macos-latest
            asset_name: sk-alloc-${{ needs.create_release.outputs.version }}-Darwin-x86_64
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install libudev-dev
        sudo apt-get install libusb-1.0-0-dev
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e .[dev]
        pip install wheel
    - name: Checkout submodules
      run: git submodule update --init
    - name: Build library
      run: |
        bash ./scripts/build.sh ${{ needs.create_release.outputs.version }} ${{ needs.create_release.outputs.branch }}
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream
